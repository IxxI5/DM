@model DM.ViewModels.IncidentsViewModel
@using DM.Models

@* Modal Edit Window *@
<div id="editForm" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="editForm" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editForm">Incident Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @* Modal Edit Form is handled by the Save Action (and not by Edit). Edit Action is used only for View (Displaying Incident Details) *@
            @using (Html.BeginForm("Save", "Home", FormMethod.Post, new { name = "submitEditForm", id = "submitEditForm" }))
            {
                @Html.AntiForgeryToken() // Prevents from submitting requests (malicious scripts) that are not generated by the actual user
                <div class="modal-body">
                    <div class="form-group">
                        @Html.LabelFor(i => i.Incident.Name, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBoxFor(i => i.Incident.Name, htmlAttributes: new { @class = "form-control", id = "incidentName", disabled = "disabled" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(i => i.Incident.Title, htmlAttributes: new { @class = "col-form-label" })
                        @Html.TextBoxFor(i => i.Incident.Title, htmlAttributes: new { @class = "form-control", id = "incidentTitle" })
                        @Html.ValidationMessageFor(i => i.Incident.Title, "", new { @style = "color:red" })
                        
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(i => i.Incident.Severity, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EnumDropDownListFor(i => i.Incident.Severity,
                                                    "- Select Severity -",
                                                    htmlAttributes: new { @class = "form-control", id = "incidentSeverity" })
                        @Html.ValidationMessageFor(i => i.Incident.Severity, "", new { @style = "color:red" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(i => i.Incident.Status, htmlAttributes: new { @class = "col-form-label" })
                        @Html.EnumDropDownListFor(i => i.Incident.Status,
                                                    "- Select Status -",
                                                    htmlAttributes: new { @class = "form-control", id = "incidentStatus" })
                        @Html.ValidationMessageFor(i => i.Incident.Status, "", new { @style = "color:red" })
                    </div>
                    <div>
                        @Html.HiddenFor(i => i.Incident.Id, htmlAttributes: new { @class = "form-control", id = "incidentId" }) @* Submit (Hidden Field Name, Value) -> (Incident.Id, incidentId) *@
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" id="buttonNew" class="btn btn-secondary" onclick="(function () { document.getElementById('submitEditForm').reset(); $(incidentId).val(0); document.getElementById('buttonDelete').disabled = true;})()">New</button> @*Put here Razor ActionLink for the Controller*@
                    <button type="submit" id="buttonSave" class="btn btn-secondary">Save changes</button> @* Client Side Validation over Incident Model Data Annotation takes place and then POSTs *@
                    <button type="button" id="buttonDelete" name="buttonDelete" class="btn btn-secondary" onclick="submitForm(3);">Delete</button>
                </div>
            }
        </div>
    </div>
</div>




